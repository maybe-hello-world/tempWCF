//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.TaskLibrary {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BitcoinBlock", Namespace="http://schemas.datacontract.org/2004/07/TaskLibrary")]
    [System.SerializableAttribute()]
    public partial class BitcoinBlock : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint BitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint NonceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] hashMerkleRootField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] hashPrevBlockField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Bits {
            get {
                return this.BitsField;
            }
            set {
                if ((this.BitsField.Equals(value) != true)) {
                    this.BitsField = value;
                    this.RaisePropertyChanged("Bits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Nonce {
            get {
                return this.NonceField;
            }
            set {
                if ((this.NonceField.Equals(value) != true)) {
                    this.NonceField = value;
                    this.RaisePropertyChanged("Nonce");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] hashMerkleRoot {
            get {
                return this.hashMerkleRootField;
            }
            set {
                if ((object.ReferenceEquals(this.hashMerkleRootField, value) != true)) {
                    this.hashMerkleRootField = value;
                    this.RaisePropertyChanged("hashMerkleRoot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] hashPrevBlock {
            get {
                return this.hashPrevBlockField;
            }
            set {
                if ((object.ReferenceEquals(this.hashPrevBlockField, value) != true)) {
                    this.hashPrevBlockField = value;
                    this.RaisePropertyChanged("hashPrevBlock");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TaskLibrary.IService1", CallbackContract=typeof(Client.TaskLibrary.IService1Callback))]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/RegisterMe")]
        void RegisterMe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/RegisterMe")]
        System.Threading.Tasks.Task RegisterMeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCurrentBlock", ReplyAction="http://tempuri.org/IService1/GetCurrentBlockResponse")]
        Client.TaskLibrary.BitcoinBlock GetCurrentBlock();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCurrentBlock", ReplyAction="http://tempuri.org/IService1/GetCurrentBlockResponse")]
        System.Threading.Tasks.Task<Client.TaskLibrary.BitcoinBlock> GetCurrentBlockAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/ProposeAnswer")]
        void ProposeAnswer(uint time, uint nonce);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/ProposeAnswer")]
        System.Threading.Tasks.Task ProposeAnswerAsync(uint time, uint nonce);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Callback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/TimeUpdate")]
        void TimeUpdate(uint time);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/BlockFound")]
        void BlockFound();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client.TaskLibrary.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.DuplexClientBase<Client.TaskLibrary.IService1>, Client.TaskLibrary.IService1 {
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterMe() {
            base.Channel.RegisterMe();
        }
        
        public System.Threading.Tasks.Task RegisterMeAsync() {
            return base.Channel.RegisterMeAsync();
        }
        
        public Client.TaskLibrary.BitcoinBlock GetCurrentBlock() {
            return base.Channel.GetCurrentBlock();
        }
        
        public System.Threading.Tasks.Task<Client.TaskLibrary.BitcoinBlock> GetCurrentBlockAsync() {
            return base.Channel.GetCurrentBlockAsync();
        }
        
        public void ProposeAnswer(uint time, uint nonce) {
            base.Channel.ProposeAnswer(time, nonce);
        }
        
        public System.Threading.Tasks.Task ProposeAnswerAsync(uint time, uint nonce) {
            return base.Channel.ProposeAnswerAsync(time, nonce);
        }
    }
}
