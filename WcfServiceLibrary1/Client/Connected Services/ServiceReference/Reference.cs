//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BitcoinBlock", Namespace="http://schemas.datacontract.org/2004/07/TaskLibrary")]
    [System.SerializableAttribute()]
    public partial class BitcoinBlock : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint BitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint NonceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] hashMerkleRootField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] hashPrevBlockField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Bits {
            get {
                return this.BitsField;
            }
            set {
                if ((this.BitsField.Equals(value) != true)) {
                    this.BitsField = value;
                    this.RaisePropertyChanged("Bits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Nonce {
            get {
                return this.NonceField;
            }
            set {
                if ((this.NonceField.Equals(value) != true)) {
                    this.NonceField = value;
                    this.RaisePropertyChanged("Nonce");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] hashMerkleRoot {
            get {
                return this.hashMerkleRootField;
            }
            set {
                if ((object.ReferenceEquals(this.hashMerkleRootField, value) != true)) {
                    this.hashMerkleRootField = value;
                    this.RaisePropertyChanged("hashMerkleRoot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] hashPrevBlock {
            get {
                return this.hashPrevBlockField;
            }
            set {
                if ((object.ReferenceEquals(this.hashPrevBlockField, value) != true)) {
                    this.hashPrevBlockField = value;
                    this.RaisePropertyChanged("hashPrevBlock");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterMe", ReplyAction="http://tempuri.org/IService1/RegisterMeResponse")]
        System.Guid RegisterMe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterMe", ReplyAction="http://tempuri.org/IService1/RegisterMeResponse")]
        System.Threading.Tasks.Task<System.Guid> RegisterMeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCurrentBlock", ReplyAction="http://tempuri.org/IService1/GetCurrentBlockResponse")]
        Client.ServiceReference.BitcoinBlock GetCurrentBlock(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCurrentBlock", ReplyAction="http://tempuri.org/IService1/GetCurrentBlockResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference.BitcoinBlock> GetCurrentBlockAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ProposeAnswer", ReplyAction="http://tempuri.org/IService1/ProposeAnswerResponse")]
        void ProposeAnswer(System.Guid id, uint time, uint nonce);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ProposeAnswer", ReplyAction="http://tempuri.org/IService1/ProposeAnswerResponse")]
        System.Threading.Tasks.Task ProposeAnswerAsync(System.Guid id, uint time, uint nonce);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client.ServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client.ServiceReference.IService1>, Client.ServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid RegisterMe() {
            return base.Channel.RegisterMe();
        }
        
        public System.Threading.Tasks.Task<System.Guid> RegisterMeAsync() {
            return base.Channel.RegisterMeAsync();
        }
        
        public Client.ServiceReference.BitcoinBlock GetCurrentBlock(System.Guid id) {
            return base.Channel.GetCurrentBlock(id);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference.BitcoinBlock> GetCurrentBlockAsync(System.Guid id) {
            return base.Channel.GetCurrentBlockAsync(id);
        }
        
        public void ProposeAnswer(System.Guid id, uint time, uint nonce) {
            base.Channel.ProposeAnswer(id, time, nonce);
        }
        
        public System.Threading.Tasks.Task ProposeAnswerAsync(System.Guid id, uint time, uint nonce) {
            return base.Channel.ProposeAnswerAsync(id, time, nonce);
        }
    }
}
